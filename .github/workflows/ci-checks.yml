name: ci-checks

on:
  workflow_call:
    inputs:
      labview-version:
        required: false
        default: "20.0"
        type: string

jobs:

  labview-checks:
  
    runs-on: ubuntu-latest

    steps:

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip'
          

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install pylavi
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv venv
          uv pip install pylavi

      - name: Run pylavi Tests
        shell: bash
        run: |

          # read the LabVIEW version from the first line of .lvversion file
          LV_VERSION="$(head -n 1 .lvversion)"
          # convert to integer
          LV_VERSION=` echo $LV_VERSION | sed 's/\..*//' `
          source .venv/bin/activate

          # print helpful info
          echo "Verifying:"
          echo "  - Save Version is $LV_VERSION"
          echo "  - Separate Compiled Code"
          echo "  - No Breakpoints"

          # call pylavi
          vi_validate \
            --path source \
            --path tests \
            --gt $LV_VERSION --lt $((LV_VERSION+1)) \
            --skip *.vit \
            --no-code \
            --breakpoints


  doc-checks:

    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    name: Documentation Checks
    
    runs-on: ubuntu-latest

    env:
      AUTODOC_PY: .github/workflows/auto-doc.py
      AUTODOC_REQUIREMENTS: "xmltodict pydantic"
      AUTODOC_DIR: .auto-doc

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip'


      - name: Checkout Auto-Doc
        uses: actions/checkout@v4
        with:
          repository: 'vipm-io/OpenG-Toolkit'
          ref: 'main'
          path: ${{env.AUTODOC_DIR}}
          sparse-checkout: |
            ${{env.AUTODOC_PY}}
          sparse-checkout-cone-mode: false

      - name: Run auto-doc.py
        run: |
          python -m pip install ${{env.AUTODOC_REQUIREMENTS}}
          mv "${AUTODOC_DIR}/${AUTODOC_PY}" $AUTODOC_PY
          python $AUTODOC_PY
          rm $AUTODOC_PY && rm -rf $AUTODOC_DIR

      - name: Commit and push changes
        uses: devops-infra/action-commit-push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_prefix: "[AUTO-DOC]"
          target_branch: auto-doc-${{github.run_number}}

      - name: Create pull request
        uses: devops-infra/action-pull-request@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          body: "**Automated pull request**<br><br>Documentation has been updated automatically."
          title: auto-doc-${{github.run_number}}
          